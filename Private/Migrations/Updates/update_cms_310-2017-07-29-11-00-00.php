<?php

use Ffcms\Core\Migrations\MigrationInterface;
use Ffcms\Core\Migrations\Migration;

/**
 * Class update_cms_310
 */
class update_cms_310 extends Migration implements MigrationInterface
{
    const UPDATE_EXTENSIONS = ['User', 'Profile', 'Content', 'Feedback', 'Search', 'Sitemap', 'Comments', 'Newcontent', 'Contenttag', 'Newcomment'];

    /**
     * Implement new update changes
     * @return void
     */
    public function up()
    {
        // set nullable varchar type for token column
        $this->getSchema()->table('users', function($table){
            $table->string('approve_token', 128)->nullable()->default(null)->change();
        });
        // set approve_token = null where it like '0' str or ''
        \Apps\ActiveRecord\User::where('approve_token', '=', '0')
            ->update('approve_token', null);

        // update comment posts architecture: add app_name and app_id relationship
        if (!$this->getSchema()->hasColumn('comment_posts', 'app_name')) {
            $this->getSchema()->table('comment_posts', function($table) {
                $table->string('app_name')->after('id');
            });
        }
        if (!$this->getSchema()->hasColumn('comment_answers', 'app_relation_id')) {
            $this->getSchema()->table('comment_answers', function($table){
                $table->integer('app_relation_id')->unsigned()->default(0)->after('app_name');
            });
        }

        \Apps\ActiveRecord\App::whereIn('sys_name', static::UPDATE_EXTENSIONS)
            ->update(['version' => '1.0.1']);

        // @todo: add algo to find app_name & app_id for oldest comments
        if ($this->getSchema()->hasColumn('comment_posts', 'pathway')) {
            $this->getSchema()->table('comment_posts', function($table){
                $table->dropColumn('pathway');
            });
        }
        // remove comment_hash column from content
        if ($this->getSchema()->hasColumn('contents', 'comment_hash')) {
            $this->getSchema()->table('contents', function($table) {
                $table->dropColumn('comment_hash');
            });
        }
        // remove user login column
        if ($this->getSchema()->hasColumn('users', 'login')) {
            $this->getSchema()->table('users', function($table) {
                $table->dropColumn('login');
            });
        }

        // add content table template column
        if (!$this->getSchema()->hasColumn('contents', 'tpl')) {
            $this->getSchema()->table('contents', function ($table) {
                $table->string('tpl')->default('default')->after('important');
            });
        }

        // add spam filter table
        $this->getSchema()->create('spams', function ($table){
            $table->increments('id');
            $table->string('ipv4', 36);
            $table->integer('user_id')->nullable();
            $table->integer('timestamp')->unsigned();
            $table->integer('counter')->default(0);

            $table->timestamps();

            $table->unique(['ipv4', 'user_id']);
        });
    }

    /**
     * @return void
     */
    public function down()
    {
        parent::down(); // TODO: Change the autogenerated stub
    }

    /**
     * Seed created table via up() method with some data
     * @return void
     */
    public function seed()
    {
        // TODO: Implement seed() method.
    }
}